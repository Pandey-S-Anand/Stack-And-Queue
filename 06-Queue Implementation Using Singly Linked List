//Naive Implementation

public class Queue {
    private SinglyLinkedList singlyLinkedList;

    Queue() {
        singlyLinkedList = new SinglyLinkedList();
    }

    /*----------------- Public Functions of Queue -----------------*/

    boolean isEmpty() {
        return singlyLinkedList.getHead() == null;
    }

    void enqueue(int data) {
        singlyLinkedList.append(data);
    }

    int dequeue() {
        return singlyLinkedList.removeFront();
    }

    int front() {
        return singlyLinkedList.getFront();
    }
}

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class SinglyLinkedList {
    private Node head; // Head of the singly linked list (front of the queue)
    private Node tail; // Tail of the singly linked list (end of the queue)

    public Node getHead() {
        return this.head;
    }

    // Append a new node with the given data to the end of the singly linked list (tail of the queue)
    public void append(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }

    // Remove the front node of the singly linked list (dequeue operation) and return its data
    public int removeFront() {
        int removedElement;

        if (head == null) { // If the singly linked list is empty, return -1 (indicating empty)
            removedElement = -1;
        } else if (head == tail) { // If there is only one node, remove it and set both head and tail to null
            removedElement = head.data;
            head = tail = null;
        } else { // Otherwise, remove the head node and update the head to the next node
            removedElement = head.data;
            head = head.next;
        }

        return removedElement;
    }

    // Return the data of the front node (peek operation) without removing it
    public int getFront() {
        if (head == null) {
            return -1;
        }

        return head.data;
    }
}


//Optimal Implementation

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class Queue {
    private Node head;
    private Node tail;

    Queue() {
    }

    /*----------------- Public Functions of Queue -----------------*/

    boolean isEmpty() {
        return head == null;
    }

    void enqueue(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }

    int dequeue() {
        int removedElement;

        if (head == null) {
            removedElement = -1;
        } else if (head == tail) {
            removedElement = head.data;
            head = tail = null;
        } else {
            removedElement = head.data;
            head = head.next;
        }

        return removedElement;
    }

    int front() {
        if (head == null) {
            return -1;
        }

        return head.data;
    }
}
