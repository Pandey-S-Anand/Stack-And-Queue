//Bruteforce Approach

class Solution {
    public long[] previousGreater(long[] arr, int n) {
        long[] previousGreaterElement = new long[n];

        for (int i = 0; i < n; i++) {
            previousGreaterElement[i] = previousGreater(arr, n, i);
        }

        return previousGreaterElement;
    }

    private long previousGreater(long[] arr, int n, int index) {
        for (int i = index - 1; i >= 0; i--) {
            if (arr[i] > arr[index]) {
                return arr[i];
            }
        }

        return -1L;
    }
}


//Optimal Approach (Monotonically decreasing stack)

class Solution {
    public long[] previousGreater(long[] arr, int n) {
        Deque<Long> stack = new ArrayDeque<>();
        long[] previousGreaterElement = new long[n];

        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && stack.peek() <= arr[i]) {
                stack.pop();
            }

            previousGreaterElement[i] = stack.isEmpty() ? -1L : stack.peek();

            stack.push(arr[i]);
        }

        return previousGreaterElement;
    }
}
