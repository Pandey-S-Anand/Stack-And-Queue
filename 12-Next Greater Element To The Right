//Bruteforce Approach

class Solution {
    public ArrayList<Integer> nextLargerElement(int[] arr) {
        ArrayList<Integer> nextLargerElement = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            nextLargerElement.add(nextLargerElement(arr, i));
        }

        return nextLargerElement;
    }

    private int nextLargerElement(int[] arr, int index) {
        for (int i = index + 1; i < arr.length; i++) {
            if (arr[i] > arr[index]) {
                return arr[i];
            }
        }

        return -1;
    }
}


//Optimal Approach (Monotonically decreasing stack)

class Solution {
    public ArrayList<Integer> nextLargerElement(int[] arr) {
        Deque<Integer> stack = new ArrayDeque<>();
        ArrayList<Integer> nextLargerElement = new ArrayList<>();

        for (int i = arr.length - 1; i >= 0; i--) {
            while (!stack.isEmpty() && stack.peek() <= arr[i]) {
                stack.pop();
            }

            nextLargerElement.add(stack.isEmpty() ? -1 : stack.peek());
            stack.push(arr[i]);
        }

        Collections.reverse(nextLargerElement);
        return nextLargerElement;
    }
}
