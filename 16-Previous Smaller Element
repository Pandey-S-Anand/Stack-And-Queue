//Bruteforce Approach

class Solution {
    static List<Integer> leftSmaller(int n, int arr[]) {
        Deque<Integer> stack = new ArrayDeque<>();
        List<Integer> previousSmaller = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            previousSmaller.add(previousSmaller(arr, n, i));
        }

        return previousSmaller;
    }

    private static int previousSmaller(int[] arr, int n, int index) {
        for (int i = index - 1; i >= 0; i--) {
            if (arr[i] < arr[index]) {
                return arr[i];
            }
        }

        return -1;
    }
}


//Optimal Approach

class Solution {
    static List<Integer> leftSmaller(int n, int arr[]) {
        Deque<Integer> stack = new ArrayDeque<>();
        List<Integer> previousSmaller = new ArrayList<>();

        for (int val : arr) {
            while (!stack.isEmpty() && stack.peek() >= val) {
                stack.pop();
            }

            previousSmaller.add(stack.isEmpty() ? -1 : stack.peek());

            stack.push(val);
        }

        return previousSmaller;
    }
}
