class Solution {
    static String postToInfix(String postfixExpr) {
        // Stack to hold operands (or intermediate expressions)
        Deque<String> operandStack = new ArrayDeque<>();
        
        for (int i = 0; i < postfixExpr.length(); i++) {
            char currentChar = postfixExpr.charAt(i);
            
            // If the character is an operand (a letter or digit), push it to the stack
            if (Character.isLetterOrDigit(currentChar)) {
                operandStack.push(String.valueOf(currentChar));
            } else {
                // If the character is an operator, pop two operands from the stack
                String rightOperand = operandStack.pop();
                String leftOperand = operandStack.pop();
                
                // Combine the operands with the operator and add parentheses for correct precedence
                String infixExpr = "(" + leftOperand + currentChar + rightOperand + ")";
                
                // Push the resulting infix expression back onto the stack
                operandStack.push(infixExpr);
            }
        }
        
        // The final expression will be the only element left in the stack
        return operandStack.peek();
    }
}
