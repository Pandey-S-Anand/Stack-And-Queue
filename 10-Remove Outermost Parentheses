// Without Stack

//Naive Implementation 

class Solution {
    public String removeOuterParentheses(String str) {
        StringBuilder result = new StringBuilder();
        boolean balanced = true;
        int balance = 0;

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);

            if (ch == '(') {
                balance++;
            } else { // if(str.charAt(i)==')')
                balance--;
            }

            if (balance == 1 && balanced) {
                balanced = false;
                continue;
            }

            if (balance == 0) {
                balanced = true;
                continue;
            }

            result.append(ch);
        }

        return result.toString();
    }
}


//Optimal Implementation 

class Solution {
    public String removeOuterParentheses(String str) {
        StringBuilder result = new StringBuilder();
        int balance = 0;

        for (char ch : str.toCharArray()) {
            if (ch == '(') {
                if (balance > 0) { // Add only if it's not the outermost '('
                    result.append(ch);
                }
                balance++;
            } else {
                balance--;
                if (balance > 0) { // Add only if it's not the outermost ')'
                    result.append(ch);
                }
            }
        }

        return result.toString();
    }
}



//With Stack

//Naive Implementation 

class Solution {
    public String removeOuterParentheses(String str) {
        StringBuilder result = new StringBuilder();
        Deque<Character> stack = new ArrayDeque<>();

        for (char ch : str.toCharArray()) {
            if (stack.isEmpty() && ch == '(') {
                stack.push('(');
            } else if (!stack.isEmpty() && ch == '(') {
                stack.push(ch);
                result.append(ch);
            } else if (stack.size() > 1 && ch == ')') {
                stack.pop();
                result.append(ch);
            } else if (stack.size() == 1 && ch == ')') {
                stack.pop();
            }
        }

        return result.toString();
    }
}


//Optimal Implementation

class Solution {
    public String removeOuterParentheses(String str) {
        StringBuilder result = new StringBuilder();
        Deque<Character> stack = new ArrayDeque<>();

        for (char ch : str.toCharArray()) {
            if (ch == '(') {
                if (!stack.isEmpty()) { // Only append if it's not the outermost '('
                    result.append(ch);
                }
                stack.push(ch);
            } else {
                stack.pop();
                if (!stack.isEmpty()) { // Only append if it's not the outermost ')'
                    result.append(ch);
                }
            }
        }

        return result.toString();
    }
}
