class Solution {
    public String removeDuplicates(String str) {
        Deque<Character> stack = new ArrayDeque();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);

            if (!stack.isEmpty() && stack.peek() == ch) {
                stack.pop();
            } else {
                stack.push(ch);
            }
        }

        StringBuilder uniqueString = new StringBuilder();

        while (!stack.isEmpty()) {
            uniqueString.append(stack.pop());
        }

        return uniqueString.reverse().toString();
    }
}

//Aliter

class Solution {
    public String removeDuplicates(String str) {
        StringBuilder uniqueString = new StringBuilder();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);

            if (uniqueString.length() != 0 && uniqueString.charAt(uniqueString.length() - 1) == ch) {
                uniqueString.deleteCharAt(uniqueString.length() - 1); // Remove the last character if it matches the current one
            } else {
                uniqueString.append(ch); // Otherwise, append the current character
            }
        }

        return uniqueString.toString();
    }
}


//Aliter

class Solution {
    public String removeDuplicates(String str) {
        int k = -1; // This pointer tracks the index of the last valid character in the uniqueString array.
        char[] uniqueStringArray = new char[str.length()];

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            // Check if the last added character in uniqueStringArray matches the current character.
            if (k != -1 && uniqueStringArray[k] == ch) {
                k--; // Remove the last added character if it matches the current one.
            } else {
                uniqueStringArray[++k] = ch; // Add the current character to uniqueStringArray.
            }
        }

        StringBuilder uniqueString = new StringBuilder();
        for (int i = 0; i <= k; i++) {
            uniqueString.append(uniqueStringArray[i]);
        }

        return uniqueString.toString();
    }
}
