//Bruteforce Approach

class Solution {
    public long subArrayRanges(int[] arr) {
        int sum = 0;
        for (int start = 0; start < arr.length; start++) {
            for (int end = start; end < arr.length; end++) {
                sum += maxMinDiffInSubarray(arr, start, end);
            }
        }

        return sum;
    }

    private int maxMinDiffInSubarray(int[] arr, int start, int end) {
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;

        for (int i = start; i <= end; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }

            if (arr[i] < min) {
                min = arr[i];
            }
        }

        return max - min;
    }
}


//Improved Approach

class Solution {
    public long subArrayRanges(int[] arr) {
        int sum = 0;

        for (int start = 0; start < arr.length; start++) {
            int prevMax = Integer.MIN_VALUE;
            int prevMin = Integer.MAX_VALUE;
            for (int end = start; end < arr.length; end++) {
                int currMax = Math.max(prevMax, arr[end]);
                int currMin = Math.min(prevMin, arr[end]);
                sum = sum + (currMax - currMin);
                prevMax = currMax;
                prevMin = currMin;
            }
        }

        return sum;
    }
}


/*
 * The problem of finding the sum of the differences between the maximum 
 * and minimum elements for all subarrays can be reformulated as follows:
 * 
 * 1. Compute the sum of the maximum elements of all subarrays.
 * 2. Compute the sum of the minimum elements of all subarrays.
 * 3. The result is the difference between the two sums:
 *      Result = Sum of Max Contributions - Sum of Min Contributions.
 * 
 * For each element in the array:
 * - Its contribution as the maximum element is calculated based on 
 *   the number of subarrays where it is the maximum.
 * - Similarly, its contribution as the minimum element is calculated 
 *   based on the number of subarrays where it is the minimum.
 * 
 * Using the next greater and previous greater indices, we can efficiently 
 * determine the number of subarrays where an element is the maximum.
 * Likewise, using the next smaller and previous smaller indices, we can 
 * determine the number of subarrays where an element is the minimum.
 * 
 * By summing up these contributions for all elements and taking the 
 * difference between the two sums, we obtain the desired result.
 */

//Optimal Approach

//Naive Implementation

class Solution {
    private Deque<Integer> stack;

    public long subArrayRanges(int[] arr) {
        stack = new ArrayDeque<>();
        int[] prevGreaterIndex = findPreviousGreater(arr);
        stack.clear();
        int[] nextGreaterIndex = findNextGreater(arr);
        stack.clear();
        int[] prevSmallerIndex = findPreviousSmaller(arr);
        stack.clear();
        int[] nextSmallerIndex = findNextSmaller(arr);

        long maxContributionSum = 0;
        long minContributionSum = 0;

        for (int i = 0; i < arr.length; i++) {
            long subarraysCountWhereCurrentIsMax = (i - prevGreaterIndex[i]) * (nextGreaterIndex[i] - i);
            long subarraysCountWhereCurrentIsMin = (i - prevSmallerIndex[i]) * (nextSmallerIndex[i] - i);

            maxContributionSum = maxContributionSum + (arr[i] * subarraysCountWhereCurrentIsMax);
            minContributionSum = minContributionSum + (arr[i] * subarraysCountWhereCurrentIsMin);
        }

        return maxContributionSum - minContributionSum;
    }

    private int[] findPreviousGreater(int[] arr) {
        int[] prevGreaterIndex = new int[arr.length];

        for (int i = 0; i < arr.length; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] < arr[i]) {
                stack.pop();
            }

            prevGreaterIndex[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }

        return prevGreaterIndex;
    }

    private int[] findNextGreater(int[] arr) {
        int[] nextGreaterIndex = new int[arr.length];

        for (int i = arr.length - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] <= arr[i]) {
                stack.pop();
            }

            nextGreaterIndex[i] = stack.isEmpty() ? arr.length : stack.peek();
            stack.push(i);
        }

        return nextGreaterIndex;
    }

    private int[] findPreviousSmaller(int[] arr) {
        int[] prevSmallerIndex = new int[arr.length];

        for (int i = 0; i < arr.length; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
                stack.pop();
            }

            prevSmallerIndex[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }

        return prevSmallerIndex;
    }

    private int[] findNextSmaller(int[] arr) {
        int[] nextSmallerIndex = new int[arr.length];

        for (int i = arr.length - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }

            nextSmallerIndex[i] = stack.isEmpty() ? arr.length : stack.peek();
            stack.push(i);
        }

        return nextSmallerIndex;
    }
}


//Optimal Implementation

class Solution {
    private Deque<Integer> stack1;
    private Deque<Integer> stack2;

    public long subArrayRanges(int[] arr) {
        stack1 = new ArrayDeque<>();
        stack2 = new ArrayDeque<>();

        int[] nextGreaterIndex = findNextGreater(arr);
        int[] nextSmallerIndex = findNextSmaller(arr);

        stack1.clear();
        stack2.clear();

        long maxContributionSum = 0;
        long minContributionSum = 0;

        for (int i = 0; i < arr.length; i++) {
            while (!stack1.isEmpty() && arr[stack1.peek()] < arr[i]) {
                stack1.pop();
            }

            int prevGreaterIndex = stack1.isEmpty() ? -1 : stack1.peek();

            while (!stack2.isEmpty() && arr[stack2.peek()] > arr[i]) {
                stack2.pop();
            }

            int prevSmallerIndex = stack2.isEmpty() ? -1 : stack2.peek();

            long subarraysCountWhereCurrentIsMax = (i - prevGreaterIndex) * (nextGreaterIndex[i] - i);
            long subarraysCountWhereCurrentIsMin = (i - prevSmallerIndex) * (nextSmallerIndex[i] - i);

            maxContributionSum = maxContributionSum + (arr[i] * subarraysCountWhereCurrentIsMax);
            minContributionSum = minContributionSum + (arr[i] * subarraysCountWhereCurrentIsMin);

            stack1.push(i);
            stack2.push(i);
        }

        return maxContributionSum - minContributionSum;
    }

    private int[] findNextGreater(int[] arr) {
        int[] nextGreaterIndex = new int[arr.length];

        for (int i = arr.length - 1; i >= 0; i--) {
            while (!stack1.isEmpty() && arr[stack1.peek()] <= arr[i]) {
                stack1.pop();
            }

            nextGreaterIndex[i] = stack1.isEmpty() ? arr.length : stack1.peek();
            stack1.push(i);
        }

        return nextGreaterIndex;
    }

    private int[] findNextSmaller(int[] arr) {
        int[] nextSmallerIndex = new int[arr.length];

        for (int i = arr.length - 1; i >= 0; i--) {
            while (!stack2.isEmpty() && arr[stack2.peek()] >= arr[i]) {
                stack2.pop();
            }

            nextSmallerIndex[i] = stack2.isEmpty() ? arr.length : stack2.peek();
            stack2.push(i);
        }

        return nextSmallerIndex;
    }
