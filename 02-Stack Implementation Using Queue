//Using Two Queue

class MyStack {
    private MyQueue mainQueue;
    private MyQueue helperQueue;

    public MyStack() {
        mainQueue = new MyQueue(100); // Initialize mainQueue with size 100
        helperQueue = new MyQueue(100); // Initialize helperQueue with size 100
    }

    public void push(int x) {
        if (!mainQueue.isFull()) {
            if (mainQueue.isEmpty()) {
                mainQueue.enqueue(x);
            } else {
                // Transfer elements from mainQueue to helperQueue
                while (!mainQueue.isEmpty()) {
                    helperQueue.enqueue(mainQueue.dequeue());
                }

                // Enqueue the new element into mainQueue
                mainQueue.enqueue(x);

                // Transfer elements back from helperQueue to mainQueue
                while (!helperQueue.isEmpty()) {
                    mainQueue.enqueue(helperQueue.dequeue());
                }
            }
        }
    }

    public int pop() {
        return mainQueue.dequeue();
    }

    public int top() {
        return mainQueue.peek();
    }

    public boolean empty() {
        return mainQueue.isEmpty();
    }
}

class MyQueue {
    private int[] queue;
    private int front;
    private int rear;

    public MyQueue(int size) {
        queue = new int[size];
        front = rear = -1;
    }

    // Enqueue element into the queue
    public void enqueue(int x) {
        if (!isFull()) {
            if (isEmpty()) {
                front = rear = 0;
            } else {
                rear++;
            }
            queue[rear] = x;
        }
    }

    // Dequeue element from the queue
    public int dequeue() {
        if (isEmpty()) {
            return -1;
        }

        int removedElement = queue[front];
        if (front == rear) {
            front = rear = -1;
        } else {
            front++;
        }
        return removedElement;
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return front == -1;
    }

    // Check if the queue is full
    public boolean isFull() {
        return rear == queue.length - 1;
    }

    // Peek the front element of the queue
    public int peek() {
        if (isEmpty()) {
            return -1;
        }
        return queue[front];
    }

    // Get the size of the queue (number of elements)
    public int size() {
        if (isEmpty()) {
            return 0;
        }
        return rear - front + 1;
    }
}



//Using One Queue

class MyStack {
    private MyQueue queue;

    public MyStack() {
        queue = new MyQueue(100);
    }

    public void push(int x) {
        // Enqueue the new element to the queue.
        queue.enqueue(x);

        /*
         * After enqueuing, rotate the queue such that the new element becomes the front
         * of the queue. You can do this by dequeuing all elements and enqueuing them
         * back, which ensures the order of elements in the queue is changed to simulate a stack.
         */
        int size = queue.size();
        for (int i = 0; i < size - 1; i++) {
            queue.enqueue(queue.dequeue()); // Dequeue from the front and enqueue to the back
        }
    }

    // Removes the element on the top of the stack and returns it
    public int pop() {
        return queue.dequeue();
    }

    // Get the top element
    public int top() {
        return queue.peek();
    }

    // Returns whether the stack is empty
    public boolean empty() {
        return queue.isEmpty();
    }
}

class MyQueue {
    private int[] queue;
    private int front;
    private int rear;

    public MyQueue(int size) {
        queue = new int[size];
        front = rear = -1;
    }

    // Enqueue element into the queue
    public void enqueue(int x) {
        if (!isFull()) {
            if (isEmpty()) {
                front = rear = 0;
            } else {
                rear++;
            }
            queue[rear] = x;
        }
    }

    // Dequeue element from the queue
    public int dequeue() {
        if (isEmpty()) {
            return -1;
        }

        int removedElement = queue[front];
        if (front == rear) {
            front = rear = -1;
        } else {
            front++;
        }
        return removedElement;
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return front == -1;
    }

    // Check if the queue is full
    public boolean isFull() {
        return rear == queue.length - 1;
    }

    // Peek the front element of the queue
    public int peek() {
        if (isEmpty()) {
            return -1;
        }
        return queue[front];
    }

    // Get the size of the queue (number of elements)
    public int size() {
        if (isEmpty()) {
            return 0;
        }
        return rear - front + 1;
    }
}
