public class Solution {
    class Queue {
        private int front, rear;
        private int[] queue;

        Queue() {
            front = -1;
            rear = -1;
            queue = new int[100001];
        }

        // Enqueue element into the queue
        public void enqueue(int x) {
            if (!isFull()) {
                if (isEmpty()) {
                    front = rear = 0;
                } else {
                    rear++;
                }
                queue[rear] = x;
            }
        }

        // Dequeue element from the queue
        public int dequeue() {
            if (isEmpty()) {
                return -1;
            }

            int removedElement = queue[front];
            if (front == rear) {
                front = rear = -1;
            } else {
                front++;
            }
            return removedElement;
        }

        // Check if the queue is empty
        public boolean isEmpty() {
            return front == -1;
        }

        // Check if the queue is full
        public boolean isFull() {
            return rear == queue.length - 1;
        }

        // Peek the front element of the queue
        public int peek() {
            if (isEmpty()) {
                return -1;
            }
            return queue[front];
        }

        // Get the size of the queue (number of elements)
        public int size() {
            if (isEmpty()) {
                return 0;
            }
            return rear - front + 1;
        }
    }
}
