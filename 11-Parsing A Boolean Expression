//Using Stack

//Naive Implementation

class Solution {
    public boolean parseBoolExpr(String expression) {
        // Stack to hold characters during parsing
        Deque<Character> stack = new ArrayDeque<>();

        // Traverse each character in the input expression
        for (int i = 0; i < expression.length(); i++) {
            char currentChar = expression.charAt(i);

            // Push all characters except ')' and ',' directly onto the stack
            if (currentChar != ')' && currentChar != ',') {
                stack.push(currentChar);
            } else if (currentChar == ')') { // If ')' is encountered, it indicates the end of a subexpression
                // List to collect all operands of the subexpression
                List<Character> operands = new ArrayList<>();

                // Pop elements from the stack until '(' is found
                while (stack.peek() != '(') {
                    operands.add(stack.pop());
                }

                // Pop the opening parenthesis '('
                stack.pop();
                // Pop the operator that precedes the '('
                char operator = stack.pop();

                // Evaluate the subexpression using the operands and operator
                char result = evaluateExpression(operands, operator);

                // Push the result back onto the stack for further processing
                stack.push(result);
            }
        }

        // The final result will be the only element left on the stack
        return stack.peek() == 't';
    }

    private char evaluateExpression(List<Character> operands, char operator) {
        switch (operator) {
            case '|': // Logical OR
                // Return 't' if any operand is 't', otherwise return 'f'
                for (char operand : operands) {
                    if (operand == 't') {
                        return 't';
                    }
                }
                return 'f';

            case '&': // Logical AND
                // Return 'f' if any operand is 'f', otherwise return 't'
                for (char operand : operands) {
                    if (operand == 'f') {
                        return 'f';
                    }
                }
                return 't';

            default: // case '!': Logical NOT (expects exactly one operand)
                return operands.get(0) == 'f' ? 't' : 'f'; // Invert the single operand and return the result
        }
    }
}

//Optimal Implementation

class Solution {
    public boolean parseBoolExpr(String expression) {
        Deque<Character> stack = new ArrayDeque<>();

        for (int i = 0; i < expression.length(); i++) {
            char currentChar = expression.charAt(i);

            if (currentChar != ')' && currentChar != ',') {
                stack.push(currentChar);
            } else if (currentChar == ')') {
                boolean hasTrue = false, hasFalse = false;

                while (stack.peek() != '(') {
                    char operand = stack.pop();
                    if (operand == 't') {
                        hasTrue = true;
                    }
                    if (operand == 'f') {
                        hasFalse = true;
                    }
                }

                stack.pop();

                char operator = stack.pop();

                char result = evaluateExpression(operator, hasTrue, hasFalse);

                stack.push(result);
            }
        }

        return stack.peek() == 't';
    }

    private char evaluateExpression(char operator, boolean hasTrue, boolean hasFalse) {
        switch (operator) {
            case '|':
                return hasTrue ? 't' : 'f';

            case '&':
                return hasFalse ? 'f' : 't';

            default:
                return hasTrue ? 'f' : 't';
        }
    }
}
