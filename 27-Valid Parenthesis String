class Solution {
    public boolean checkValidString(String str) {
        Deque<Integer> openBracketStack = new ArrayDeque<>();
        Deque<Integer> starStack = new ArrayDeque<>();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);

            if (ch == '(') {
                openBracketStack.push(i);
            } else if (ch == '*') {
                starStack.push(i);
            } else {
                if (!openBracketStack.isEmpty()) {
                    openBracketStack.pop();
                } else {
                    if (!starStack.isEmpty()) {
                        starStack.pop();
                    } else {
                        return false;
                    }
                }
            }
        }

        if (openBracketStack.isEmpty()) {
            return true;
        }

        if (openBracketStack.size() > starStack.size()) {
            return false;
        }

        while (!openBracketStack.isEmpty()) {
            if (starStack.peek() > openBracketStack.peek()) {
                openBracketStack.pop();
                starStack.pop();
            } else {
                return false;
            }
        }

        return true;
    }
}
